var documenterSearchIndex = {"docs":
[{"location":"#ChessProject-Documentation-1","page":"Home","title":"ChessProject Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Modules = [ChessProject]\nOrder   = [:function, :type, :constant]","category":"page"},{"location":"#ChessProject.bishoplike-Tuple{Board}","page":"Home","title":"ChessProject.bishoplike","text":"bishoplike(board::Board)\n\nGet the location of all the bishops and queens on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.bishops-Tuple{Board}","page":"Home","title":"ChessProject.bishops","text":"bishops(board::Board)\n\nGet the location of all the bishops on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.cancastlekingside-Tuple{Board,Color}","page":"Home","title":"ChessProject.cancastlekingside","text":"cancastlekingside(board::Board, color::Color)\ncancastlekingside(board::Board)\n\nReturn a Bool which denotes if the player of color can castle kingside.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.cancastlequeenside-Tuple{Board,Color}","page":"Home","title":"ChessProject.cancastlequeenside","text":"cancastlequeenside(board::Board, color::Color)\ncancastlequeenside(board::Board)\n\nReturn a Bool which denotes if the player of color can castle queenside. If no color is given, it assumes the color of the current turn.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.checkers-Tuple{Board}","page":"Home","title":"ChessProject.checkers","text":"checkers(board::Board)\n\nReturn the Bitboard of all the pieces giving check.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.empty-Tuple{Board}","page":"Home","title":"ChessProject.empty","text":"empty(board::Board)\n\nReturn the positions, as a Bitboard, of all the empty squares on the board.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.enemy-Tuple{Board}","page":"Home","title":"ChessProject.enemy","text":"enemies(board::Board)\n\nReturn the positions, as a Bitboard, of all the enemies on the board.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.friendly-Tuple{Board}","page":"Home","title":"ChessProject.friendly","text":"friendly(board::Board)\n\nReturn the positions, as a Bitboard, of all the friendly units on the board.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.importfen-Tuple{String}","page":"Home","title":"ChessProject.importfen","text":"importfen(fen::String)\n\nCreate a Board object from an input FEN, given as a String.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.ischeck-Tuple{Board}","page":"Home","title":"ChessProject.ischeck","text":"ischeck(board::Board)\n\nReturns true if the king is in check, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.kings-Tuple{Board}","page":"Home","title":"ChessProject.kings","text":"kings(board::Board)\n\nGet the location of all the kings on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.knights-Tuple{Board}","page":"Home","title":"ChessProject.knights","text":"knights(board::Board)\n\nGet the location of all the knights on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.monkey!-Tuple{Board}","page":"Home","title":"ChessProject.monkey!","text":"monkey!(board)\n\nThe monkey AI plays random moves. It is a monkey.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.occupied-Tuple{Board}","page":"Home","title":"ChessProject.occupied","text":"occupied(board::Board)\n\nReturn the positions, as a Bitboard, of all the occupied squares on the board.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.pawns-Tuple{Board}","page":"Home","title":"ChessProject.pawns","text":"pawns(board::Board)\n\nGet the location of all the pawns on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.perft-Tuple{Board,Int64}","page":"Home","title":"ChessProject.perft","text":"perft(board::Board, depth::Int)\n\nRun the perft routine to a given depth.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.pinned-Tuple{Board}","page":"Home","title":"ChessProject.pinned","text":"pinned(board::Board)\n\nReturn the Bitboard of all the pieces that are pinned.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.queens-Tuple{Board}","page":"Home","title":"ChessProject.queens","text":"queens(board::Board)\n\nGet the location of all the queens on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.rooklike-Tuple{Board}","page":"Home","title":"ChessProject.rooklike","text":"rooklike(board::Board)\n\nGet the location of all the rooks and queens on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.rooks-Tuple{Board}","page":"Home","title":"ChessProject.rooks","text":"rooks(board::Board)\n\nGet the location of all the rooks on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.Bitboard","page":"Home","title":"ChessProject.Bitboard","text":"Bitboard\n\nThe type used to encode the information about the 64 squares into a 64 bit number. Construct an object of type Bitboard by providing a value of type UInt64.\n\nExample\n\njulia> Bitboard(0x00ff00000000ff00)\nBitboard:\n8\n7 x x x x x x x x\n6\n5\n4\n3\n2 x x x x x x x x\n1\n  A B C D E F G H\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.Board","page":"Home","title":"ChessProject.Board","text":"Board\n\nA DataType representing the state of a chess board.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.Color","page":"Home","title":"ChessProject.Color","text":"Color\n\nDataType representing a color.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.Magic","page":"Home","title":"ChessProject.Magic","text":"Magic\n\nDataType used for storing magic numbers, rook or bishop move masks, and respective shift and offset values for the computation of sliding moves.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.Move","page":"Home","title":"ChessProject.Move","text":"Move\n\nDataType used to store the information encoding a move.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.Move-Tuple{Integer,Integer,Integer}","page":"Home","title":"ChessProject.Move","text":"Move(move_from::Integer, move_to::Integer, move_flag::Integer)\n\nEncode a move, giving the from & to squares, alongside the promotion flag.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.Move-Tuple{Integer,Integer}","page":"Home","title":"ChessProject.Move","text":"Move(move_from::Integer, move_to::Integer)\n\nEncode a move, giving the from & to squares, assuming no special move flags.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.MoveStack","page":"Home","title":"ChessProject.MoveStack","text":"MoveStack\n\nDataType for storing lists of moves.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.Piece","page":"Home","title":"ChessProject.Piece","text":"Piece\n\nDataType representing a specific piece with type and color.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.PieceType","page":"Home","title":"ChessProject.PieceType","text":"PieceType\n\nDataType representing a type of piece.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.Undo","page":"Home","title":"ChessProject.Undo","text":"Undo\n\nDataType for storing the minimal amount of information to restore a Board object to its previous position.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.UndoStack","page":"Home","title":"ChessProject.UndoStack","text":"UndoStack\n\nDataType for storing lists of Undos.\n\n\n\n\n\n","category":"type"},{"location":"#ChessProject.BLACK","page":"Home","title":"ChessProject.BLACK","text":"BLACK\n\nConstant representing black.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.WHITE","page":"Home","title":"ChessProject.WHITE","text":"WHITE\n\nConstant representing white.\n\n\n\n\n\n","category":"constant"},{"location":"#Base.:!-Tuple{Color}","page":"Home","title":"Base.:!","text":"!(color::Color)\n\nFind the opposite color.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:&-Tuple{Bitboard,Bitboard}","page":"Home","title":"Base.:&","text":"&(bb_1::Bitboard, bb_2::Bitboard)\n&(bb::Bitboard, sqr::Integer)\n\nThe bitwise \"and\" (intersection) between two Bitboard objects. Also supports the case where one argument is a square of Integer type.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:<<-Tuple{Bitboard,Integer}","page":"Home","title":"Base.:<<","text":"<<(bb::Bitboard, n::Int)\n\nShift the bits in the Bitboard object left by an integer n.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:>>-Tuple{Bitboard,Integer}","page":"Home","title":"Base.:>>","text":">>(bb::Bitboard, n::Int)\n\nShift the bits in the Bitboard object right by an integer n.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:|-Tuple{Bitboard,Bitboard}","page":"Home","title":"Base.:|","text":"|(bb_1::Bitboard, bb_2::Bitboard)\n|(bb::Bitboard, sqr::Integer)\n\nThe bitwise \"or\" (union) between two Bitboard objects. Also supports the case where one argument is a square of Integer type.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:~-Tuple{Bitboard}","page":"Home","title":"Base.:~","text":"~(bb::Bitboard)\n\nThe bitwise \"not\" of a Bitboard object. That is, return a Bitboard representing all the squares not in bb.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:⊻-Tuple{Bitboard,Bitboard}","page":"Home","title":"Base.:⊻","text":"⊻(bb_1::Bitboard, bb_2::Bitboard)\n\nThe bitwise \"exclusive or\" between two Bitboard objects.\n\n\n\n\n\n","category":"method"},{"location":"#Base.isempty-Tuple{Bitboard}","page":"Home","title":"Base.isempty","text":"isempty(bb:Bitboard)\n\nDetermines if a given Bitboard contains any active squares\n\n\n\n\n\n","category":"method"},{"location":"#Base.isone-Tuple{Bitboard}","page":"Home","title":"Base.isone","text":"isone(bb::Bitboard)\n\nReturns true if the Bitboard contains only one square.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.absearch-Tuple{Board,Int64,Int64,Int64}","page":"Home","title":"ChessProject.absearch","text":"absearch()\n\nNaive αβ search. Under development.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.add!-Tuple{Board,Piece,Bitboard,Integer}","page":"Home","title":"ChessProject.add!","text":"add!(board::Board, piece::Piece, bb::Bitboard)\nadd!(board::Board, piece::Piece, sqr::Integer)\n\nAdd a piece to the board square given by an Integer sqr, or a Bitboard bb.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.addremove!-Tuple{Board,Piece,Bitboard,Integer}","page":"Home","title":"ChessProject.addremove!","text":"addremove!(board::Board, piece::Piece, bb::Bitboard)\naddremove!(board::Board, piece::Piece, sqr::Integer)\n\nRemove a piece from the board at the square given by an Integer sqr, or a Bitboard bb, and then add the given piece in its place.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.apply_castle!-Tuple{Board,Move}","page":"Home","title":"ChessProject.apply_castle!","text":"apply_castle!(board::Board, move::Move)\n\nApply the given move to the board. Assumes the move has the __KING_CASTLE or __QUEEN_CASTLE flag.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.apply_enpass!-Tuple{Board,Move}","page":"Home","title":"ChessProject.apply_enpass!","text":"apply_enpass!(board::Board, move::Move)\n\nApply the given move to the board. Assumes the move has the __ENPASS flag.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.apply_move!-Tuple{Board,Move}","page":"Home","title":"ChessProject.apply_move!","text":"apply_move!(board::Board, move::Move, undo::Undo)\n\nApply the given move to the board, adding changes to 'undo'.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.apply_normal!-Tuple{Board,Move}","page":"Home","title":"ChessProject.apply_normal!","text":"apply_normal!(board::Board, move::Move)\n\nApply the given move to the board. Assumes the move has either the __NORMAL_MOVE or __DOUBLE_PAWN flags.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.apply_promo!-Tuple{Board,Move}","page":"Home","title":"ChessProject.apply_promo!","text":"apply_promo!(board::Board, move::Move)\n\nApply the given move to the board. Assumes the move has the __<PIECE>_PROMO flag, where <PIECE> is either a KNIGHT, BISHOP, ROOK, or QUEEN.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.blockers-Tuple{Integer,Integer}","page":"Home","title":"ChessProject.blockers","text":"blockers(sqr_1::Integer, sqr_2::Integer)\n\nRetrieve all the blocking squares between sqr_1 and sqr_2, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.chartopiece-Tuple{Char}","page":"Home","title":"ChessProject.chartopiece","text":"chartopiece(c::Char)\n\nConverts a Char from the FEN to its respective Piece type.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.color-Tuple{Piece}","page":"Home","title":"ChessProject.color","text":"color(piece::Piece)\n\nReturn the Color type of a given piece.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.count-Tuple{Bitboard}","page":"Home","title":"ChessProject.count","text":"count(bb::Bitboard)\n\nCount the number of filled squares in a Bitboard object.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.evaluate-Tuple{Board}","page":"Home","title":"ChessProject.evaluate","text":"evaluate(board)\n\nNaive evaluation function to get the code development going.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.file-Tuple{Integer}","page":"Home","title":"ChessProject.file","text":"file(bb::Bitboard)\nfile(sqr::Int)\n\nGet the Bitboard representing the file of the given square. Input is given as either an Integer type, or a Bitboard - assuming it contains only one square.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.findpins-Tuple{Board}","page":"Home","title":"ChessProject.findpins","text":"pins(board::Board)\n\nRetrieves all the pinned pieces on the board, as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.flag-Tuple{Move}","page":"Home","title":"ChessProject.flag","text":"flag(move::Move)\n\nGiven a move, return any special flags, as an Integer.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.from-Tuple{Move}","page":"Home","title":"ChessProject.from","text":"from(move::Move)\n\nGiven a move, retrieve the \"move from\" square, as an Integer.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.gen_moves!-Tuple{MoveStack,Board}","page":"Home","title":"ChessProject.gen_moves!","text":"gen_moves!(movestack::Movestack, board::Board)\n\nGenerate all the possible moves in the position.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.gen_noisy_moves!-Tuple{MoveStack,Board}","page":"Home","title":"ChessProject.gen_noisy_moves!","text":"gen_noisy_moves!(movestack::MoveStack, board::Board)\n\nGenerate all the noisy moves on a board, pushing each Move to the MoveStack.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.gen_quiet_moves!-Tuple{MoveStack,Board}","page":"Home","title":"ChessProject.gen_quiet_moves!","text":"gen_quiet_moves!(movestack::MoveStack, board::Board)\n\nGenerate all the quiet moves on a board, pushing each Move to the MoveStack.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.isattacked-Tuple{Board,Integer}","page":"Home","title":"ChessProject.isattacked","text":"isattacked(board::Board, sqr::Integer)\n\nIs the given square attacked?\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.isdoublecheck-Tuple{Board}","page":"Home","title":"ChessProject.isdoublecheck","text":"isdoublecheck(board::Board)\n\nReturns true if the king is in check, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.ismany-Tuple{Bitboard}","page":"Home","title":"ChessProject.ismany","text":"ismany(bb::Bitboard)\n\nReturns true if the Bitboard contains more than one square.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.kingAttackers-Tuple{Board,Integer}","page":"Home","title":"ChessProject.kingAttackers","text":"kingAttackers(board::Board, sqr::Integer)\n\nFind all the attackers of a given square, sqr.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.kingMoves-Tuple{Integer}","page":"Home","title":"ChessProject.kingMoves","text":"kingMoves(sqr::Integer)\n\nGenerate the potential king moves from a square given by sqr, returned as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.knightMoves-Tuple{Integer}","page":"Home","title":"ChessProject.knightMoves","text":"knightMoves(sqr::Integer)\n\nGenerate the potential knight moves from a square given by sqr, returned as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.makepiece-Tuple{PieceType,Color}","page":"Home","title":"ChessProject.makepiece","text":"makepiece(piece::Piece, color::Color)\n\nReturn a piece of a given color.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.owl!-Tuple{Board,Int64}","page":"Home","title":"ChessProject.owl!","text":"owl!(board, depth)\n\nThe owl looks ahead a move using alpha-beta pruning plus quiescence, alongside a naive evaluation. The owl is wiser than the monkey! Care should be taken in selecting the depth, as too high will take a long time.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.pawnAdvances-Tuple{Color,Integer}","page":"Home","title":"ChessProject.pawnAdvances","text":"pawnAdvances(c::Color, sqr::Integer)\n\nGenerate the potential pawn pushes from a square given by sqr, from the point of view of the color c. Returned as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.pawnAttacks-Tuple{Color,Integer}","page":"Home","title":"ChessProject.pawnAttacks","text":"pawnAttacks(c::Color, sqr::Integer)\n\nGenerate the potential pawn attacks from a square given by sqr, from the point of view of the color c. Returned as a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.piece-Tuple{Board,Integer}","page":"Home","title":"ChessProject.piece","text":"piece(board::Board, sqr::Integer)\n\nGet the Piece located at a square, sqr.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.qsearch-Tuple{Board,Int64,Int64,Int64}","page":"Home","title":"ChessProject.qsearch","text":"qsearch()\n\nQuiescence search function. Under development.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.rank-Tuple{Integer}","page":"Home","title":"ChessProject.rank","text":"rank(bb::Bitboard)\nrank(sqr::Int)\n\nGet the Bitboard representing the rank of the given square. Input is given as either an Integer type, or a Bitboard - assuming it contains only one square.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.remove!-Tuple{Board,Bitboard,Integer}","page":"Home","title":"ChessProject.remove!","text":"remove!(board::Board, bb::Bitboard)\nremove!(board::Board, sqr::Integer)\n\nRemove a piece from the board at the square given by an Integer sqr, or a Bitboard bb.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.square-Tuple{Bitboard}","page":"Home","title":"ChessProject.square","text":"square(bb::Bitboard)\n\nReturns an Int representing the first square contained within a Bitboard.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.squareAttackers-Tuple{Board,Integer}","page":"Home","title":"ChessProject.squareAttackers","text":"squareAttackers(board::Board, sqr::Integer)\n\nFind all the enemy units that attack a given square, sqr.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.switchturn!-Tuple{Board}","page":"Home","title":"ChessProject.switchturn!","text":"switchturn(board::Board)\n\nSwitches the Color of the side to move on a given Board object.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.to-Tuple{Move}","page":"Home","title":"ChessProject.to","text":"to(move::Move)\n\nGiven a move, retrieve the \"move to\" square, as an Integer.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.type-Tuple{Piece}","page":"Home","title":"ChessProject.type","text":"type(piece::Piece)\n\nReturn the type of a given piece.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.updatecastling!-Tuple{Board,Integer,Integer}","page":"Home","title":"ChessProject.updatecastling!","text":"updatecastling!(board::Board, sqr_from::Integer, sqr_to::Integer)\n\nUpdate the castling rights of the board, given a move is played from sqr_from to sqr_to.\n\n\n\n\n\n","category":"method"},{"location":"#ChessProject.BISHOP","page":"Home","title":"ChessProject.BISHOP","text":"BISHOP\n\nConstant representing a bishop.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.BISHOP_TABLE","page":"Home","title":"ChessProject.BISHOP_TABLE","text":"BISHOP_TABLE\n\nConstant containing precomputed bishop moves for all occupancy configurations.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.EMPTY","page":"Home","title":"ChessProject.EMPTY","text":"EMPTY\n\nA Bitboard constant representing an empty board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE","page":"Home","title":"ChessProject.FILE","text":"FILE\n\nA static vector containing all the Bitboard representations of the files of the board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_A","page":"Home","title":"ChessProject.FILE_A","text":"FILE_A\n\nA Bitboard constant representing the A file of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_AB","page":"Home","title":"ChessProject.FILE_AB","text":"FILE_AB\n\nA Bitboard constant representing the files A and B together.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_B","page":"Home","title":"ChessProject.FILE_B","text":"FILE_B\n\nA Bitboard constant representing the B file of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_C","page":"Home","title":"ChessProject.FILE_C","text":"FILE_C\n\nA Bitboard constant representing the C file of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_D","page":"Home","title":"ChessProject.FILE_D","text":"FILE_D\n\nA Bitboard constant representing the D file of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_E","page":"Home","title":"ChessProject.FILE_E","text":"FILE_E\n\nA Bitboard constant representing the E file of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_F","page":"Home","title":"ChessProject.FILE_F","text":"FILE_F\n\nA Bitboard constant representing the F file of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_G","page":"Home","title":"ChessProject.FILE_G","text":"FILE_G\n\nA Bitboard constant representing the G file of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_GH","page":"Home","title":"ChessProject.FILE_GH","text":"FILE_GH\n\nA Bitboard constant representing the files G and H together.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FILE_H","page":"Home","title":"ChessProject.FILE_H","text":"FILE_H\n\nA Bitboard constant representing the H file of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.FULL","page":"Home","title":"ChessProject.FULL","text":"FULL\n\nA Bitboard constant representing a full board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.KING","page":"Home","title":"ChessProject.KING","text":"KING\n\nConstant representing a King.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.KNIGHT","page":"Home","title":"ChessProject.KNIGHT","text":"KNIGHT\n\nConstant representing a knight.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.NONE","page":"Home","title":"ChessProject.NONE","text":"None\n\nConstant representing no color.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.PAWN","page":"Home","title":"ChessProject.PAWN","text":"PAWN\n\nConstant representing a pawn.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.QUEEN","page":"Home","title":"ChessProject.QUEEN","text":"QUEEN\n\nConstant representing a Queen.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK","page":"Home","title":"ChessProject.RANK","text":"RANK\n\nA static vector containing all the Bitboard representations of the ranks of the board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_1","page":"Home","title":"ChessProject.RANK_1","text":"RANK_1\n\nA Bitboard constant representing the 1st rank (A1 -> H1) of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_12","page":"Home","title":"ChessProject.RANK_12","text":"RANK_12\n\nA Bitboard constant representing the 1st and 2nd ranks of the chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_18","page":"Home","title":"ChessProject.RANK_18","text":"RANK_18\n\nA Bitboard constant representing the promotion ranks of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_2","page":"Home","title":"ChessProject.RANK_2","text":"RANK_2\n\nA Bitboard constant representing the 2nd rank of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_27","page":"Home","title":"ChessProject.RANK_27","text":"RANK_27\n\nA Bitboard constant representing the starting pawn ranks of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_3","page":"Home","title":"ChessProject.RANK_3","text":"RANK_3\n\nA Bitboard constant representing the 3rd rank of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_4","page":"Home","title":"ChessProject.RANK_4","text":"RANK_4\n\nA Bitboard constant representing the 4th rank of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_5","page":"Home","title":"ChessProject.RANK_5","text":"RANK_5\n\nA Bitboard constant representing the 5th rank of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_6","page":"Home","title":"ChessProject.RANK_6","text":"RANK_6\n\nA Bitboard constant representing the 6th rank of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_7","page":"Home","title":"ChessProject.RANK_7","text":"RANK_7\n\nA Bitboard constant representing the 7th rank of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_78","page":"Home","title":"ChessProject.RANK_78","text":"RANK_12\n\nA Bitboard constant representing the 7th and 8th ranks of the chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.RANK_8","page":"Home","title":"ChessProject.RANK_8","text":"RANK_8\n\nA Bitboard constant representing the 8th rank of a chess board.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.ROOK","page":"Home","title":"ChessProject.ROOK","text":"ROOK\n\nConstant representing a rook.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.ROOK_TABLE","page":"Home","title":"ChessProject.ROOK_TABLE","text":"ROOK_TABLE\n\nConstant containing precomputed rook moves for all occupancy configurations.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.SYMBOLS","page":"Home","title":"ChessProject.SYMBOLS","text":"SYMBOLS\n\nA constant holding the glyphs for each chess piece.\n\n\n\n\n\n","category":"constant"},{"location":"#ChessProject.VOID","page":"Home","title":"ChessProject.VOID","text":"Blank\n\nConstant representing no piece, or a blank square.\n\n\n\n\n\n","category":"constant"}]
}
